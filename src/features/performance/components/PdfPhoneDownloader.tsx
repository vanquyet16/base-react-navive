import React, {useState} from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  Alert,
  ActivityIndicator,
  Platform,
  Share,
} from 'react-native';
import {PdfUtils} from '@/shared/utils';
import ReactNativeBlobUtil from 'react-native-blob-util';
import Icon from 'react-native-vector-icons/MaterialIcons';

interface PdfPhoneDownloaderProps {
  url: string;
  fileName?: string;
  onDownloadComplete?: (localPath: string) => void;
  onDownloadError?: (error: any) => void;
  style?: any;
}

const PdfPhoneDownloader: React.FC<PdfPhoneDownloaderProps> = ({
  url,
  fileName,
  onDownloadComplete,
  onDownloadError,
  style,
}) => {
  const [downloading, setDownloading] = useState(false);

  // T·∫°o t√™n file t·ª´ URL n·∫øu kh√¥ng ƒë∆∞·ª£c cung c·∫•p
  const getFileName = () => {
    if (fileName) return fileName;
    return PdfUtils.getFilenameFromUrl(url);
  };

  // T·∫£i PDF v·ªÅ th∆∞ m·ª•c Downloads c·ªßa ƒëi·ªán tho·∫°i
  const downloadToPhone = async () => {
    try {
      setDownloading(true);

      let targetPath: string;
      let successMessage: string;

      if (Platform.OS === 'ios') {
        // iOS: L∆∞u v√†o Documents c·ªßa ƒëi·ªán tho·∫°i
        targetPath = `${
          ReactNativeBlobUtil.fs.dirs.DocumentDir
        }/${getFileName()}`;
        successMessage = `PDF ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o Documents c·ªßa ƒëi·ªán tho·∫°i`;
      } else {
        // Android: L∆∞u v√†o Downloads
        targetPath = `${
          ReactNativeBlobUtil.fs.dirs.DownloadDir
        }/${getFileName()}`;
        successMessage = `PDF ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o Downloads c·ªßa ƒëi·ªán tho·∫°i`;
      }

      // T·∫£i file
      const localPath = await PdfUtils.downloadPdf(url, getFileName());

      // Copy file t·ª´ Documents c·ªßa app sang th∆∞ m·ª•c ƒëi·ªán tho·∫°i
      const appFilePath = `${
        ReactNativeBlobUtil.fs.dirs.DocumentDir
      }/${getFileName()}`;
      const data = await ReactNativeBlobUtil.fs.readFile(appFilePath, 'base64');
      await ReactNativeBlobUtil.fs.writeFile(targetPath, data, 'base64');

      Alert.alert('T·∫£i th√†nh c√¥ng!', successMessage, [
        {
          text: 'M·ªü File Manager',
          onPress: () => openFileManager(),
        },
        {text: 'OK'},
      ]);

      onDownloadComplete?.(targetPath);
    } catch (error) {
      console.error('L·ªói khi t·∫£i PDF:', error);
      Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ t·∫£i PDF v·ªÅ ƒëi·ªán tho·∫°i. Vui l√≤ng th·ª≠ l·∫°i.');
      onDownloadError?.(error);
    } finally {
      setDownloading(false);
    }
  };

  // M·ªü File Manager
  const openFileManager = () => {
    if (Platform.OS === 'ios') {
      // M·ªü Files app tr√™n iOS
      Alert.alert(
        'M·ªü Files App',
        'Vui l√≤ng m·ªü ·ª©ng d·ª•ng Files v√† t√¨m file trong th∆∞ m·ª•c Documents',
        [
          {text: 'OK'},
          {
            text: 'M·ªü Files',
            onPress: () => {
              // iOS kh√¥ng th·ªÉ m·ªü Files app tr·ª±c ti·∫øp
              Alert.alert(
                'H∆∞·ªõng d·∫´n',
                '1. M·ªü ·ª©ng d·ª•ng Files\n2. Ch·ªçn "On My iPhone"\n3. T√¨m file PDF v·ª´a t·∫£i',
              );
            },
          },
        ],
      );
    } else {
      // M·ªü File Manager tr√™n Android
      Alert.alert(
        'M·ªü File Manager',
        'Vui l√≤ng m·ªü File Manager v√† t√¨m file trong th∆∞ m·ª•c Downloads',
        [
          {text: 'OK'},
          {
            text: 'M·ªü Downloads',
            onPress: () => {
              // C√≥ th·ªÉ m·ªü Downloads folder tr√™n Android
              Alert.alert(
                'H∆∞·ªõng d·∫´n',
                '1. M·ªü File Manager\n2. Ch·ªçn "Downloads"\n3. T√¨m file PDF v·ª´a t·∫£i',
              );
            },
          },
        ],
      );
    }
  };

  // Share file
  const shareFile = async () => {
    try {
      setDownloading(true);

      // T·∫£i file tr∆∞·ªõc
      const localPath = await PdfUtils.downloadPdf(url, getFileName());
      const appFilePath = `${
        ReactNativeBlobUtil.fs.dirs.DocumentDir
      }/${getFileName()}`;

      // Share file
      await Share.share({
        url: Platform.OS === 'ios' ? appFilePath : `file://${appFilePath}`,
        title: getFileName(),
        message: `PDF: ${getFileName()}`,
      });
    } catch (error) {
      console.error('L·ªói khi share file:', error);
      Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ share file. Vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      setDownloading(false);
    }
  };

  // Hi·ªÉn th·ªã th√¥ng tin th∆∞ m·ª•c ƒë√≠ch
  const getDestinationInfo = () => {
    if (Platform.OS === 'ios') {
      return {
        title: 'üì± L∆∞u v√†o Documents c·ªßa iPhone',
        subtitle: 'File s·∫Ω ƒë∆∞·ª£c l∆∞u trong th∆∞ m·ª•c Documents c·ªßa ƒëi·ªán tho·∫°i',
        icon: 'phone-iphone',
      };
    } else {
      return {
        title: 'ü§ñ L∆∞u v√†o Downloads c·ªßa Android',
        subtitle: 'File s·∫Ω ƒë∆∞·ª£c l∆∞u trong th∆∞ m·ª•c Downloads c·ªßa ƒëi·ªán tho·∫°i',
        icon: 'android',
      };
    }
  };

  const destinationInfo = getDestinationInfo();

  return (
    <View style={[styles.container, style]}>
      {/* Th√¥ng tin th∆∞ m·ª•c ƒë√≠ch */}
      <View style={styles.destinationInfo}>
        <Icon name={destinationInfo.icon} size={24} color="#007AFF" />
        <View style={styles.destinationText}>
          <Text style={styles.destinationTitle}>{destinationInfo.title}</Text>
          <Text style={styles.destinationSubtitle}>
            {destinationInfo.subtitle}
          </Text>
        </View>
      </View>

      {/* N√∫t t·∫£i v·ªÅ ƒëi·ªán tho·∫°i */}
      <TouchableOpacity
        style={[styles.downloadButton, downloading && styles.downloadingButton]}
        onPress={downloadToPhone}
        disabled={downloading}>
        {downloading ? (
          <ActivityIndicator size="small" color="#fff" />
        ) : (
          <Icon name="file-download" size={20} color="#fff" />
        )}
        <Text style={styles.downloadButtonText}>
          {downloading ? 'ƒêang t·∫£i...' : 'T·∫£i v·ªÅ ƒëi·ªán tho·∫°i'}
        </Text>
      </TouchableOpacity>

      {/* N√∫t share file */}
      <TouchableOpacity
        style={styles.shareButton}
        onPress={shareFile}
        disabled={downloading}>
        <Icon name="share" size={20} color="#007AFF" />
        <Text style={styles.shareButtonText}>Share file</Text>
      </TouchableOpacity>

      {/* Th√¥ng tin b·ªï sung */}
      <View style={styles.infoCard}>
        <Text style={styles.infoTitle}>‚ÑπÔ∏è L∆∞u √Ω:</Text>
        <Text style={styles.infoText}>
          ‚Ä¢ File s·∫Ω ƒë∆∞·ª£c l∆∞u trong th∆∞ m·ª•c{' '}
          {Platform.OS === 'ios' ? 'Documents' : 'Downloads'} c·ªßa ƒëi·ªán tho·∫°i
        </Text>
        <Text style={styles.infoText}>
          ‚Ä¢ C√≥ th·ªÉ truy c·∫≠p t·ª´ File Manager c·ªßa ƒëi·ªán tho·∫°i
        </Text>
        <Text style={styles.infoText}>
          ‚Ä¢ S·ª≠ d·ª•ng "Share" ƒë·ªÉ g·ª≠i file qua email ho·∫∑c cloud
        </Text>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    padding: 16,
  },
  destinationInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#f0f8ff',
    padding: 16,
    borderRadius: 8,
    marginBottom: 16,
  },
  destinationText: {
    marginLeft: 12,
    flex: 1,
  },
  destinationTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
    marginBottom: 4,
  },
  destinationSubtitle: {
    fontSize: 14,
    color: '#666',
  },
  downloadButton: {
    backgroundColor: '#007AFF',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 12,
    paddingHorizontal: 20,
    borderRadius: 8,
    marginBottom: 12,
  },
  downloadingButton: {
    backgroundColor: '#666',
  },
  downloadButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
    marginLeft: 8,
  },
  shareButton: {
    backgroundColor: '#f0f8ff',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 12,
    paddingHorizontal: 20,
    borderRadius: 8,
    marginBottom: 16,
    borderWidth: 1,
    borderColor: '#007AFF',
  },
  shareButtonText: {
    color: '#007AFF',
    fontSize: 16,
    fontWeight: '600',
    marginLeft: 8,
  },
  infoCard: {
    backgroundColor: '#fff',
    padding: 16,
    borderRadius: 8,
    borderLeftWidth: 4,
    borderLeftColor: '#007AFF',
  },
  infoTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
    marginBottom: 8,
  },
  infoText: {
    fontSize: 14,
    color: '#666',
    marginBottom: 4,
  },
});

export default PdfPhoneDownloader;
