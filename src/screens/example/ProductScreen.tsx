import React, {useState} from 'react';
import {
  View,
  Text,
  StyleSheet,
  FlatList,
  TouchableOpacity,
  Modal,
  Alert,
  RefreshControl,
  Image,
} from 'react-native';
import {
  useProducts,
  useCreateProduct,
  useUpdateProduct,
  useDeleteProduct,
} from '@/shared/hooks/queries/useProducts';
import {
  Product,
  CreateProductRequest,
  ProductFilters,
} from '@/services/productService';
import {useBaseForm} from '@/shared/hooks';
import FormInput from '@/components/form/FormInput';

// Component hi·ªÉn th·ªã item product
const ProductItem: React.FC<{
  product: Product;
  onEdit: (product: Product) => void;
  onDelete: (id: string) => void;
}> = ({product, onEdit, onDelete}) => {
  return (
    <View style={styles.productItem}>
      {/* H√¨nh ·∫£nh s·∫£n ph·∫©m */}
      {product.imageUrl && (
        <Image source={{uri: product.imageUrl}} style={styles.productImage} />
      )}

      {/* Th√¥ng tin s·∫£n ph·∫©m */}
      <View style={styles.productInfo}>
        <Text style={styles.productName}>{product.name}</Text>
        <Text style={styles.productDescription}>{product.description}</Text>
        <Text style={styles.productCategory}>Danh m·ª•c: {product.category}</Text>
        <Text style={styles.productPrice}>
          Gi√°: {product.price.toLocaleString('vi-VN')} VNƒê
        </Text>
        <Text style={styles.productStock}>T·ªìn kho: {product.stock}</Text>
      </View>

      {/* N√∫t ch·ª©c nƒÉng */}
      <View style={styles.productActions}>
        <TouchableOpacity
          style={[styles.actionButton, styles.editButton]}
          onPress={() => onEdit(product)}>
          <Text style={styles.actionButtonText}>S·ª≠a</Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={[styles.actionButton, styles.deleteButton]}
          onPress={() => onDelete(product.id)}>
          <Text style={styles.actionButtonText}>X√≥a</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
};

// Component form s·ª≠ d·ª•ng useBaseForm v·ªõi ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng react-hook-form
const ProductForm: React.FC<{
  visible: boolean;
  product?: Product;
  onClose: () => void;
  filters: ProductFilters;
}> = ({visible, product, onClose, filters}) => {
  // S·ª≠ d·ª•ng mutations t·ª´ useProducts
  const createMutation = useCreateProduct(filters);
  const updateMutation = useUpdateProduct(filters);

  // üéØ S·ª≠ d·ª•ng useBaseForm v·ªõi t·∫•t c·∫£ t√≠nh nƒÉng c·ªßa react-hook-form:
  // - setValue: set gi√° tr·ªã cho field
  // - watch: theo d√µi gi√° tr·ªã realtime
  // - reset: reset form v·ªÅ defaultValues
  // - handleSubmitWithLoading: x·ª≠ l√Ω submit v·ªõi loading state
  const {
    control,
    handleSubmitWithLoading,
    formState: {isValid},
    isSubmitting,
    setValue,
    reset,
  } = useBaseForm<CreateProductRequest>({
    mode: 'onChange',
    defaultValues: {
      name: '',
      description: '',
      price: 0,
      category: '',
      stock: 0,
      imageUrl: '',
    },

    onSubmit: async (data: CreateProductRequest) => {
      try {
        if (product) {
          // C·∫≠p nh·∫≠t s·∫£n ph·∫©m
          await updateMutation.mutateAsync({id: product.id, ...data});
        } else {
          // T·∫°o s·∫£n ph·∫©m m·ªõi
          await createMutation.mutateAsync(data);
        }
        onClose();
      } catch (error) {
        // L·ªói s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω b·ªüi useBaseForm
        throw error;
      }
    },
    successMessage: product
      ? 'C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!'
      : 'Th√™m s·∫£n ph·∫©m th√†nh c√¥ng!',
    errorMessage: product
      ? 'C·∫≠p nh·∫≠t s·∫£n ph·∫©m th·∫•t b·∫°i!'
      : 'Th√™m s·∫£n ph·∫©m th·∫•t b·∫°i!',
    resetOnSuccess: true,
  });

  // Effect ƒë·ªÉ set d·ªØ li·ªáu khi edit ho·∫∑c reset khi th√™m m·ªõi
  React.useEffect(() => {
    if (visible && product) {
      // Set t·ª´ng field khi edit - s·ª≠ d·ª•ng setValue c·ªßa react-hook-form
      setValue('name', product.name);
      setValue('description', product.description);
      setValue('price', product.price);
      setValue('category', product.category);
      setValue('stock', product.stock);
      setValue('imageUrl', product.imageUrl || '');
    } else if (visible && !product) {
      // Reset v·ªÅ defaultValues khi th√™m m·ªõi
      reset();
    }
  }, [visible, product, setValue, reset]);

  const isLoading = createMutation.isPending || updateMutation.isPending;

  return (
    <Modal visible={visible} animationType="slide" transparent>
      <View style={styles.modalContainer}>
        <View style={styles.modalContent}>
          <Text style={styles.modalTitle}>
            {product ? 'S·ª≠a s·∫£n ph·∫©m' : 'Th√™m s·∫£n ph·∫©m m·ªõi'}
          </Text>

          {/* ‚úèÔ∏è T·∫•t c·∫£ inputs s·ª≠ d·ª•ng setValue v√† watchedValues t·ª´ react-hook-form */}

          {/* Input t√™n s·∫£n ph·∫©m */}
          <FormInput
            control={control}
            name="name"
            label="T√™n s·∫£n ph·∫©m"
            placeholder="Nh·∫≠p t√™n s·∫£n ph·∫©m"
            required
            rules={{
              required: 'T√™n s·∫£n ph·∫©m l√† b·∫Øt bu·ªôc',
            }}
          />

          {/* Input m√¥ t·∫£ */}
          <FormInput
            control={control}
            name="description"
            label="M√¥ t·∫£ s·∫£n ph·∫©m"
            placeholder="Nh·∫≠p m√¥ t·∫£ s·∫£n ph·∫©m"
            required
            multiline
            numberOfLines={3}
            style={styles.textArea}
            rules={{
              required: 'M√¥ t·∫£ s·∫£n ph·∫©m l√† b·∫Øt bu·ªôc',
            }}
          />

          {/* Input gi√° */}
          <FormInput
            control={control}
            name="price"
            label="Gi√° (VNƒê)"
            placeholder="Nh·∫≠p gi√° s·∫£n ph·∫©m"
            required
            keyboardType="numeric"
            rules={{
              required: 'Gi√° s·∫£n ph·∫©m l√† b·∫Øt bu·ªôc',
              min: {
                value: 1,
                message: 'Gi√° s·∫£n ph·∫©m ph·∫£i l·ªõn h∆°n 0',
              },
            }}
          />

          {/* Input danh m·ª•c */}
          <FormInput
            control={control}
            name="category"
            label="Danh m·ª•c"
            placeholder="Nh·∫≠p danh m·ª•c s·∫£n ph·∫©m"
            required
            rules={{
              required: 'Danh m·ª•c l√† b·∫Øt bu·ªôc',
            }}
          />

          {/* Input t·ªìn kho */}
          <FormInput
            control={control}
            name="stock"
            label="S·ªë l∆∞·ª£ng t·ªìn kho"
            placeholder="Nh·∫≠p s·ªë l∆∞·ª£ng t·ªìn kho"
            required
            keyboardType="numeric"
            rules={{
              required: 'S·ªë l∆∞·ª£ng t·ªìn kho l√† b·∫Øt bu·ªôc',
              min: {
                value: 0,
                message: 'S·ªë l∆∞·ª£ng t·ªìn kho kh√¥ng ƒë∆∞·ª£c √¢m',
              },
            }}
          />

          {/* Input URL h√¨nh ·∫£nh */}
          <FormInput
            control={control}
            name="imageUrl"
            label="URL h√¨nh ·∫£nh"
            placeholder="Nh·∫≠p URL h√¨nh ·∫£nh (t√πy ch·ªçn)"
          />

          {/* N√∫t h√†nh ƒë·ªông */}
          <View style={styles.modalActions}>
            <TouchableOpacity
              style={[styles.modalButton, styles.cancelButton]}
              onPress={onClose}>
              <Text style={styles.modalButtonText}>H·ªßy</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={[
                styles.modalButton,
                styles.submitButton,
                (!isValid || isSubmitting || isLoading) &&
                  styles.disabledButton,
              ]}
              onPress={handleSubmitWithLoading}
              disabled={!isValid || isSubmitting || isLoading}>
              <Text style={styles.modalButtonText}>
                {isSubmitting || isLoading
                  ? 'ƒêang x·ª≠ l√Ω...'
                  : product
                  ? 'C·∫≠p nh·∫≠t'
                  : 'Th√™m m·ªõi'}
              </Text>
            </TouchableOpacity>
          </View>
        </View>
      </View>
    </Modal>
  );
};

// Component ch√≠nh
const ProductScreen: React.FC = () => {
  const [showForm, setShowForm] = useState(false);
  const [editingProduct, setEditingProduct] = useState<Product | undefined>();
  const [filters, _setFilters] = useState<ProductFilters>({page: 1, limit: 10});

  // S·ª≠ d·ª•ng hooks t·ª´ useProducts.ts
  const {data: productsData, isLoading, refetch} = useProducts(filters);
  const deleteMutation = useDeleteProduct(filters);

  // X·ª≠ l√Ω s·ª≠a s·∫£n ph·∫©m
  const handleEditProduct = (product: Product) => {
    setEditingProduct(product);
    setShowForm(true);
  };

  // X·ª≠ l√Ω x√≥a s·∫£n ph·∫©m
  const handleDeleteProduct = (id: string) => {
    Alert.alert('X√°c nh·∫≠n x√≥a', 'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a s·∫£n ph·∫©m n√†y?', [
      {text: 'H·ªßy', style: 'cancel'},
      {
        text: 'X√≥a',
        style: 'destructive',
        onPress: () => deleteMutation.mutate(id),
      },
    ]);
  };

  // X·ª≠ l√Ω th√™m s·∫£n ph·∫©m m·ªõi
  const handleAddProduct = () => {
    setEditingProduct(undefined);
    setShowForm(true);
  };

  return (
    <View style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <Text style={styles.title}>Qu·∫£n l√Ω s·∫£n ph·∫©m</Text>
        <TouchableOpacity style={styles.addButton} onPress={handleAddProduct}>
          <Text style={styles.addButtonText}>+ Th√™m</Text>
        </TouchableOpacity>
      </View>

      {/* Info hi·ªÉn th·ªã s·ªë l∆∞·ª£ng */}
      {productsData && (
        <View style={styles.infoContainer}>
          <Text style={styles.infoText}>
            Hi·ªÉn th·ªã {productsData.products.length} / {productsData.total} s·∫£n
            ph·∫©m
          </Text>
        </View>
      )}

      {/* Danh s√°ch s·∫£n ph·∫©m */}
      <FlatList
        data={productsData?.products || []}
        keyExtractor={item => item.id}
        renderItem={({item}) => (
          <ProductItem
            product={item}
            onEdit={handleEditProduct}
            onDelete={handleDeleteProduct}
          />
        )}
        refreshControl={
          <RefreshControl refreshing={isLoading} onRefresh={refetch} />
        }
        contentContainerStyle={styles.listContainer}
        showsVerticalScrollIndicator={false}
      />

      {/* Form th√™m/s·ª≠a */}
      <ProductForm
        visible={showForm}
        product={editingProduct}
        onClose={() => setShowForm(false)}
        filters={filters}
      />
    </View>
  );
};

// Styles
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  title: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#333',
  },
  addButton: {
    backgroundColor: '#4CAF50',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 8,
  },
  addButtonText: {
    color: '#fff',
    fontWeight: 'bold',
  },
  infoContainer: {
    padding: 12,
    backgroundColor: '#e8f5e8',
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  infoText: {
    fontSize: 14,
    color: '#4CAF50',
    textAlign: 'center',
    fontWeight: '500',
  },
  listContainer: {
    padding: 16,
  },
  productItem: {
    backgroundColor: '#fff',
    padding: 16,
    marginBottom: 12,
    borderRadius: 8,
    shadowColor: '#000',
    shadowOffset: {width: 0, height: 2},
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  productImage: {
    width: '100%',
    height: 200,
    borderRadius: 8,
    marginBottom: 12,
  },
  productInfo: {
    marginBottom: 12,
  },
  productName: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 4,
  },
  productDescription: {
    fontSize: 14,
    color: '#666',
    marginBottom: 4,
  },
  productCategory: {
    fontSize: 14,
    color: '#888',
    marginBottom: 4,
  },
  productPrice: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#4CAF50',
    marginBottom: 4,
  },
  productStock: {
    fontSize: 14,
    color: '#888',
  },
  productActions: {
    flexDirection: 'row',
    justifyContent: 'flex-end',
    gap: 8,
  },
  actionButton: {
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 6,
  },
  editButton: {
    backgroundColor: '#2196F3',
  },
  deleteButton: {
    backgroundColor: '#f44336',
  },
  actionButtonText: {
    color: '#fff',
    fontWeight: 'bold',
  },
  modalContainer: {
    flex: 1,
    backgroundColor: 'rgba(0,0,0,0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContent: {
    backgroundColor: '#fff',
    padding: 20,
    margin: 20,
    borderRadius: 12,
    width: '90%',
    maxWidth: 400,
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    textAlign: 'center',
    marginBottom: 20,
    color: '#333',
  },
  textArea: {
    height: 80,
    textAlignVertical: 'top',
  },
  modalActions: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 20,
  },
  modalButton: {
    flex: 1,
    padding: 12,
    borderRadius: 8,
    marginHorizontal: 4,
  },
  cancelButton: {
    backgroundColor: '#9e9e9e',
  },
  submitButton: {
    backgroundColor: '#4CAF50',
  },
  modalButtonText: {
    color: '#fff',
    textAlign: 'center',
    fontWeight: 'bold',
  },

  disabledButton: {
    backgroundColor: '#ccc',
  },
});

export default ProductScreen;
