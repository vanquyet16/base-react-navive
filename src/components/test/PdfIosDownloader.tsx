import React, {useState} from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  Alert,
  ActivityIndicator,
  Platform,
} from 'react-native';
import {PdfUtils} from '../../utils';
import ReactNativeBlobUtil from 'react-native-blob-util';
import Icon from 'react-native-vector-icons/MaterialIcons';

interface PdfIosDownloaderProps {
  url: string;
  fileName?: string;
  onDownloadComplete?: (localPath: string) => void;
  onDownloadError?: (error: any) => void;
  style?: any;
}

const PdfIosDownloader: React.FC<PdfIosDownloaderProps> = ({
  url,
  fileName,
  onDownloadComplete,
  onDownloadError,
  style,
}) => {
  const [downloading, setDownloading] = useState(false);
  const [saving, setSaving] = useState(false);

  // T·∫°o t√™n file t·ª´ URL n·∫øu kh√¥ng ƒë∆∞·ª£c cung c·∫•p
  const getFileName = () => {
    if (fileName) return fileName;
    return PdfUtils.getFilenameFromUrl(url);
  };

  // T·∫£i PDF v√† l∆∞u v√†o Files app
  const downloadAndSaveToFiles = async () => {
    try {
      setDownloading(true);

      // T·∫£i file tr∆∞·ªõc
      const localPath = await PdfUtils.downloadPdf(url, getFileName());
      const appFilePath = `${
        ReactNativeBlobUtil.fs.dirs.DocumentDir
      }/${getFileName()}`;

      // ƒê·ªçc file data
      const fileData = await ReactNativeBlobUtil.fs.readFile(
        appFilePath,
        'base64',
      );

      // Ch·ªâ hi·ªÉn th·ªã tr√™n iOS
      if (Platform.OS !== 'ios') {
        Alert.alert('Th√¥ng b√°o', 'T√≠nh nƒÉng n√†y ch·ªâ kh·∫£ d·ª•ng tr√™n iOS');
        return;
      }

      // Th·ª≠ s·ª≠ d·ª•ng DocumentPicker
      try {
        const DocumentPicker = require('react-native-document-picker').default;

        const result = await DocumentPicker.pick({
          type: [DocumentPicker.types.allFiles],
          mode: 'open',
          allowMultiSelection: false,
          copyTo: 'cachesDirectory',
        });

        if (result && result.length > 0) {
          const selectedFile = result[0];

          // L∆∞u file v√†o v·ªã tr√≠ ƒë∆∞·ª£c ch·ªçn
          await saveFileToLocation(fileData, selectedFile);

          Alert.alert(
            'Th√†nh c√¥ng!',
            `PDF "${getFileName()}" ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o Files app`,
            [
              {
                text: 'M·ªü Files',
                onPress: () => openFilesApp(),
              },
              {text: 'OK'},
            ],
          );

          onDownloadComplete?.(selectedFile.fileCopyUri || '');
        }
      } catch (pickerError: any) {
        if (pickerError.code === 'E_PICKER_CANCELLED') {
          console.log('User cancelled the picker');
          Alert.alert('Th√¥ng b√°o', 'ƒê√£ h·ªßy ch·ªçn v·ªã tr√≠ l∆∞u file');
        } else {
          console.error('DocumentPicker error:', pickerError);

          // Ki·ªÉm tra n·∫øu l√† l·ªói read-only (simulator)
          if (
            pickerError.message &&
            pickerError.message.includes('read only')
          ) {
            Alert.alert(
              'L∆∞u √Ω Simulator',
              'Trong iOS Simulator, m·ªôt s·ªë th∆∞ m·ª•c c√≥ th·ªÉ ch·ªâ ƒë·ªçc. File ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o Documents c·ªßa app.',
              [
                {
                  text: 'M·ªü Files',
                  onPress: () => openFilesApp(),
                },
                {text: 'OK'},
              ],
            );
          } else {
            // Fallback: L∆∞u v√†o Documents c·ªßa app
            await saveToAppDocuments(fileData);
            Alert.alert(
              'Th√†nh c√¥ng!',
              `PDF "${getFileName()}" ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o Documents c·ªßa app`,
              [
                {
                  text: 'M·ªü Files',
                  onPress: () => openFilesApp(),
                },
                {text: 'OK'},
              ],
            );
          }
          onDownloadComplete?.(appFilePath);
        }
      }
    } catch (error: any) {
      console.error('L·ªói khi t·∫£i/l∆∞u PDF:', error);
      Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ t·∫£i ho·∫∑c l∆∞u PDF. Vui l√≤ng th·ª≠ l·∫°i.');
      onDownloadError?.(error);
    } finally {
      setDownloading(false);
    }
  };

  // L∆∞u file v√†o Documents c·ªßa app
  const saveToAppDocuments = async (fileData: string) => {
    try {
      const appFilePath = `${
        ReactNativeBlobUtil.fs.dirs.DocumentDir
      }/${getFileName()}`;
      await ReactNativeBlobUtil.fs.writeFile(appFilePath, fileData, 'base64');
    } catch (error) {
      console.error('L·ªói khi l∆∞u file:', error);
      throw error;
    }
  };

  // L∆∞u file v√†o v·ªã tr√≠ ƒë∆∞·ª£c ch·ªçn
  const saveFileToLocation = async (fileData: string, selectedFile: any) => {
    try {
      setSaving(true);

      // T·∫°o file t·∫°m th·ªùi
      const tempPath = `${
        ReactNativeBlobUtil.fs.dirs.CacheDir
      }/${getFileName()}`;
      await ReactNativeBlobUtil.fs.writeFile(tempPath, fileData, 'base64');

      // Copy file ƒë·∫øn v·ªã tr√≠ ƒë∆∞·ª£c ch·ªçn
      if (selectedFile.fileCopyUri) {
        const targetPath = selectedFile.fileCopyUri.replace('file://', '');
        await ReactNativeBlobUtil.fs.writeFile(targetPath, fileData, 'base64');
      }
    } catch (error) {
      console.error('L·ªói khi l∆∞u file:', error);
      throw error;
    } finally {
      setSaving(false);
    }
  };

  // M·ªü Files app
  const openFilesApp = () => {
    Alert.alert(
      'M·ªü Files App',
      '1. M·ªü ·ª©ng d·ª•ng Files tr√™n iPhone\n2. T√¨m file PDF v·ª´a l∆∞u\n3. File s·∫Ω hi·ªÉn th·ªã trong th∆∞ m·ª•c b·∫°n ƒë√£ ch·ªçn',
      [
        {text: 'OK'},
        {
          text: 'H∆∞·ªõng d·∫´n chi ti·∫øt',
          onPress: () => {
            Alert.alert(
              'H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Files',
              '‚Ä¢ M·ªü ·ª©ng d·ª•ng Files\n‚Ä¢ Ch·ªçn "Browse" ·ªü d∆∞·ªõi\n‚Ä¢ T√¨m th∆∞ m·ª•c b·∫°n ƒë√£ ch·ªçn\n‚Ä¢ File PDF s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√≥\n‚Ä¢ Tap ƒë·ªÉ m·ªü file',
            );
          },
        },
      ],
    );
  };

  // Ch·ªçn th∆∞ m·ª•c ƒë·ªÉ l∆∞u file
  const pickDirectory = async () => {
    try {
      setSaving(true);

      // T·∫£i file tr∆∞·ªõc
      const localPath = await PdfUtils.downloadPdf(url, getFileName());
      const appFilePath = `${
        ReactNativeBlobUtil.fs.dirs.DocumentDir
      }/${getFileName()}`;
      const fileData = await ReactNativeBlobUtil.fs.readFile(
        appFilePath,
        'base64',
      );

      // Th·ª≠ s·ª≠ d·ª•ng DocumentPicker
      try {
        const DocumentPicker = require('react-native-document-picker').default;

        const result = await DocumentPicker.pickDirectory();

        if (result) {
          const targetPath = `${result.uri}/${getFileName()}`;
          await ReactNativeBlobUtil.fs.writeFile(
            targetPath,
            fileData,
            'base64',
          );

          Alert.alert('Th√†nh c√¥ng!', `PDF ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o th∆∞ m·ª•c ƒë√£ ch·ªçn`, [
            {
              text: 'M·ªü Files',
              onPress: () => openFilesApp(),
            },
            {text: 'OK'},
          ]);

          onDownloadComplete?.(targetPath);
        }
      } catch (pickerError: any) {
        if (pickerError.code === 'E_PICKER_CANCELLED') {
          console.log('User cancelled directory picker');
          Alert.alert('Th√¥ng b√°o', 'ƒê√£ h·ªßy ch·ªçn th∆∞ m·ª•c');
        } else {
          console.error('Directory picker error:', pickerError);

          // Ki·ªÉm tra n·∫øu l√† l·ªói read-only (simulator)
          if (
            pickerError.message &&
            pickerError.message.includes('read only')
          ) {
            Alert.alert(
              'L∆∞u √Ω Simulator',
              'Trong iOS Simulator, m·ªôt s·ªë th∆∞ m·ª•c c√≥ th·ªÉ ch·ªâ ƒë·ªçc. File ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o Documents c·ªßa app.',
              [
                {
                  text: 'M·ªü Files',
                  onPress: () => openFilesApp(),
                },
                {text: 'OK'},
              ],
            );
          } else {
            // Fallback: L∆∞u v√†o Documents c·ªßa app
            await saveToAppDocuments(fileData);
            Alert.alert(
              'Th√†nh c√¥ng!',
              `PDF "${getFileName()}" ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o Documents c·ªßa app`,
              [
                {
                  text: 'M·ªü Files',
                  onPress: () => openFilesApp(),
                },
                {text: 'OK'},
              ],
            );
          }
          onDownloadComplete?.(appFilePath);
        }
      }
    } catch (error: any) {
      console.error('L·ªói khi ch·ªçn th∆∞ m·ª•c:', error);
      Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ ch·ªçn th∆∞ m·ª•c. Vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      setSaving(false);
    }
  };

  // Ch·ªâ hi·ªÉn th·ªã tr√™n iOS
  if (Platform.OS !== 'ios') {
    return (
      <View style={[styles.container, style]}>
        <View style={styles.notSupported}>
          <Icon name="phone-iphone" size={24} color="#666" />
          <Text style={styles.notSupportedText}>
            T√≠nh nƒÉng n√†y ch·ªâ kh·∫£ d·ª•ng tr√™n iOS
          </Text>
        </View>
      </View>
    );
  }

  return (
    <View style={[styles.container, style]}>
      {/* Th√¥ng tin iOS */}
      <View style={styles.iosInfo}>
        <Icon name="phone-iphone" size={24} color="#007AFF" />
        <View style={styles.iosInfoText}>
          <Text style={styles.iosInfoTitle}>
            üì± L∆∞u v√†o Files app c·ªßa iPhone
          </Text>
          <Text style={styles.iosInfoSubtitle}>
            Ch·ªçn v·ªã tr√≠ l∆∞u file trong Files app (iCloud, On My iPhone, etc.)
          </Text>
        </View>
      </View>

      {/* N√∫t t·∫£i v√† l∆∞u */}
      <TouchableOpacity
        style={[
          styles.downloadButton,
          (downloading || saving) && styles.downloadingButton,
        ]}
        onPress={downloadAndSaveToFiles}
        disabled={downloading || saving}>
        {downloading || saving ? (
          <ActivityIndicator size="small" color="#fff" />
        ) : (
          <Icon name="file-download" size={20} color="#fff" />
        )}
        <Text style={styles.downloadButtonText}>
          {downloading
            ? 'ƒêang t·∫£i...'
            : saving
            ? 'ƒêang l∆∞u...'
            : 'T·∫£i v√† l∆∞u v√†o Files'}
        </Text>
      </TouchableOpacity>

      {/* N√∫t ch·ªçn th∆∞ m·ª•c */}
      <TouchableOpacity
        style={styles.pickDirectoryButton}
        onPress={pickDirectory}
        disabled={downloading || saving}>
        <Icon name="folder-open" size={20} color="#007AFF" />
        <Text style={styles.pickDirectoryButtonText}>Ch·ªçn th∆∞ m·ª•c c·ª• th·ªÉ</Text>
      </TouchableOpacity>

      {/* Th√¥ng tin b·ªï sung */}
      <View style={styles.infoCard}>
        <Text style={styles.infoTitle}>‚ÑπÔ∏è L∆∞u √Ω:</Text>
        <Text style={styles.infoText}>
          ‚Ä¢ File s·∫Ω ƒë∆∞·ª£c l∆∞u v√†o Files app c·ªßa iPhone
        </Text>
        <Text style={styles.infoText}>
          ‚Ä¢ C√≥ th·ªÉ ch·ªçn iCloud Drive, On My iPhone, ho·∫∑c th∆∞ m·ª•c kh√°c
        </Text>
        <Text style={styles.infoText}>
          ‚Ä¢ File s·∫Ω hi·ªÉn th·ªã trong ·ª©ng d·ª•ng Files
        </Text>
        <Text style={styles.infoText}>
          ‚Ä¢ C√≥ th·ªÉ m·ªü file b·∫±ng ·ª©ng d·ª•ng PDF kh√°c
        </Text>
        <Text style={styles.infoText}>
          ‚Ä¢ Trong Simulator, m·ªôt s·ªë th∆∞ m·ª•c c√≥ th·ªÉ ch·ªâ ƒë·ªçc
        </Text>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    padding: 16,
  },
  notSupported: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#f5f5f5',
    padding: 16,
    borderRadius: 8,
  },
  notSupportedText: {
    marginLeft: 12,
    fontSize: 14,
    color: '#666',
  },
  iosInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#f0f8ff',
    padding: 16,
    borderRadius: 8,
    marginBottom: 16,
  },
  iosInfoText: {
    marginLeft: 12,
    flex: 1,
  },
  iosInfoTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
    marginBottom: 4,
  },
  iosInfoSubtitle: {
    fontSize: 14,
    color: '#666',
  },
  downloadButton: {
    backgroundColor: '#007AFF',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 12,
    paddingHorizontal: 20,
    borderRadius: 8,
    marginBottom: 12,
  },
  downloadingButton: {
    backgroundColor: '#666',
  },
  downloadButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
    marginLeft: 8,
  },
  pickDirectoryButton: {
    backgroundColor: '#f0f8ff',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 12,
    paddingHorizontal: 20,
    borderRadius: 8,
    marginBottom: 16,
    borderWidth: 1,
    borderColor: '#007AFF',
  },
  pickDirectoryButtonText: {
    color: '#007AFF',
    fontSize: 16,
    fontWeight: '600',
    marginLeft: 8,
  },
  infoCard: {
    backgroundColor: '#fff',
    padding: 16,
    borderRadius: 8,
    borderLeftWidth: 4,
    borderLeftColor: '#007AFF',
  },
  infoTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
    marginBottom: 8,
  },
  infoText: {
    fontSize: 14,
    color: '#666',
    marginBottom: 4,
  },
});

export default PdfIosDownloader;
